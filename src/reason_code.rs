use bytes::{BytesMut, Buf};
use super::error::DecodeError;

#[derive(Copy, Clone, Debug, PartialEq)]
pub enum ReasonCode {
  Success = 0x00,
  GrantedQoS1 = 0x01,
  GrantedQoS2 = 0x02,
  DisconnectWithWill = 0x04,
  NoMatchingSubscribers = 0x10,
  NoSubscriptionExisted = 0x11,
  ContinueAuthentication = 0x18,
  ReAuthenticate = 0x19,
  UnspecifiedError = 0x80,
  MalformedPacket = 0x81,
  ProtocolError = 0x82,
  ImplementationSpecificError = 0x83,
  UnsupportedProtocolVersion = 0x84,
  ClientIdentifierNotValid = 0x85,
  BadUserNameOrPassword = 0x86,
  NotAuthorized = 0x87,
  ServerUnavailable = 0x88,
  ServerBusy = 0x89,
  Banned = 0x8A,
  ServerShuttingDown = 0x8B,
  BadAuthenticationMethod = 0x8C,
  KeepAliveMethod = 0x8D,
  SessionTakenOver = 0x8E,
  TopicFilterInvalid = 0x8F,
  TopicNameInvalid = 0x90,
  PacketIdentifierInUse = 0x91,
  PacketIdentifierNotFound = 0x92,
  ReceiveMaximumExceeded = 0x93,
  TopicAliasInvalid = 0x94,
  PacketTooLarge = 0x95,
  MessageRateTooHigh = 0x96,
  QuotaExceeded = 0x97,
  AdministrativeAction = 0x98,
  PayloadFormatInvalid = 0x99,
  RetainNotSupported = 0x9A,
  QoSNotSupported = 0x9B,
  UseAnotherServer = 0x9C,
  ServerMoved = 0x9D,
  SharedSubscriptionsNotSupported = 0x9E,
  ConnectionRateExceeded = 0x9F,
  MaximumConnectTime = 0xA0,
  SubscriptionIdentifiersNotSupported = 0xA1,
  WildcardSubsdcriptionNotSupported = 0xA2
}

impl ReasonCode {
  pub fn decode(buffer: &mut BytesMut) -> Result<Self, DecodeError> {
    let reason_code = match buffer.get_u8() {
      0x00 => ReasonCode::Success,
      0x01 => ReasonCode::GrantedQoS1,
      0x02 => ReasonCode::GrantedQoS2,
      0x04 => ReasonCode::DisconnectWithWill,
      0x10 => ReasonCode::NoMatchingSubscribers,
      0x11 => ReasonCode::NoSubscriptionExisted,
      0x18 => ReasonCode::ContinueAuthentication,
      0x19 => ReasonCode::ReAuthenticate,
      0x80 => ReasonCode::UnspecifiedError,
      0x81 => ReasonCode::MalformedPacket,
      0x82 => ReasonCode::ProtocolError,
      0x83 => ReasonCode::ImplementationSpecificError,
      0x84 => ReasonCode::UnsupportedProtocolVersion,
      0x85 => ReasonCode::ClientIdentifierNotValid,
      0x86 => ReasonCode::BadUserNameOrPassword,
      0x87 => ReasonCode::NotAuthorized,
      0x88 => ReasonCode::ServerUnavailable,
      0x89 => ReasonCode::ServerBusy,
      0x8A => ReasonCode::Banned,
      0x8B => ReasonCode::ServerShuttingDown,
      0x8C => ReasonCode::BadAuthenticationMethod,
      0x8D => ReasonCode::KeepAliveMethod,
      0x8E => ReasonCode::SessionTakenOver,
      0x8F => ReasonCode::TopicFilterInvalid,
      0x90 => ReasonCode::TopicNameInvalid,
      0x91 => ReasonCode::PacketIdentifierInUse,
      0x92 => ReasonCode::PacketIdentifierNotFound,
      0x93 => ReasonCode::ReceiveMaximumExceeded,
      0x94 => ReasonCode::TopicAliasInvalid,
      0x95 => ReasonCode::PacketTooLarge,
      0x96 => ReasonCode::MessageRateTooHigh,
      0x97 => ReasonCode::QuotaExceeded,
      0x98 => ReasonCode::AdministrativeAction,
      0x99 => ReasonCode::PayloadFormatInvalid,
      0x9A => ReasonCode::RetainNotSupported,
      0x9B => ReasonCode::QoSNotSupported,
      0x9C => ReasonCode::UseAnotherServer,
      0x9D => ReasonCode::ServerMoved,
      0x9E => ReasonCode::SharedSubscriptionsNotSupported,
      0x9F => ReasonCode::ConnectionRateExceeded,
      0xA0 => ReasonCode::MaximumConnectTime,
      0xA1 => ReasonCode::SubscriptionIdentifiersNotSupported,
      0xA2 => ReasonCode::WildcardSubsdcriptionNotSupported,
      _ => return Err(DecodeError::FormatError)
    };
    Ok(reason_code)
  }
}